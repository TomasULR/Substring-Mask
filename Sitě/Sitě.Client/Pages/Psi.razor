@page "/psi"
@rendermode InteractiveAuto
<h3>Subnet Calculator</h3>

<button @onclick="AddInput" class="calculate-btn">Přidat vstup</button>

@foreach (var (value, index) in inputValues.Select((value, index) => (value, index)))
{
    <div>
        <input @bind="inputValues[index]" />
        <button @onclick="() => RemoveInput(index)" class="calculate-btn">Odstranit</button>
    </div>
}

<button class="calculate-btn" @onclick="Calculate">Vypočítat</button>

@if (resultsList != null)
{
    <div class="results">
        <h4>Výsledky výpočtu:</h4>
        @foreach (var result in resultsList)
        {
            <div>
                <p><strong>Rozsah sítě:</strong> @result.NetworkRange</p>
                <p><strong>První host:</strong> @result.FirstHost</p>
                <p><strong>Poslední host:</strong> @result.LastHost</p>
                <p><strong>Broadcast adresa:</strong> @result.BroadcastAddress</p>
                <p><strong>Maska sítě:</strong> @result.SubnetMask</p>
                <p>--------</p>
            </div>
        }
    </div>
}



@code{
    private int SubnetCount { get; set; }
    private int DevicesPerSubnet { get; set; }
    private List<CalculationResult> resultsList = new List<CalculationResult>();


    List<int?> inputValues = new List<int?>();

    void AddInput()
    {
        inputValues.Add(null); // Přidáme null pro nový vstup
    }

    void RemoveInput(int index)
    {
        inputValues.RemoveAt(index);
    }

    private class CalculationResult
    {
        public string NetworkRange { get; set; }
        public string BroadcastAddress { get; set; }
        public string FirstHost { get; set; }
        public string LastHost { get; set; }
        public string SubnetMask { get; set; }
        public string NumberSubnets { get; set; }
    }
    private void Calculate()
    {
        resultsList.Clear();
        var sortedInputs = inputValues.OrderByDescending(val => val).ToList();
        foreach (var hosts in sortedInputs)
        {
            int requiredHosts = hosts.HasValue ? hosts.Value + 2 : 0;

            int hostBits = (int)Math.Ceiling(Math.Log(requiredHosts, 2));

            int networkPrefix = 32 - hostBits;
            SubnetData matchingSubnet = subnetData.FirstOrDefault(subnet => subnet.PrefixLength == networkPrefix);

            string subnetMask = matchingSubnet != null ? matchingSubnet.SubnetMask : "N/A";
            int maxHosts = (int)Math.Pow(2, 32 - networkPrefix) - 2;

            string networkAddress = $"192.0.2./{networkPrefix}";

            string firstHost = $"{networkAddress.Substring(0, networkAddress.IndexOf('/')) + 1}/{networkPrefix}";
            string lastHost = $"{networkAddress.Substring(0, networkAddress.IndexOf('/')) + (maxHosts)}/{networkPrefix}"; // Poslední host
            string broadcastAddress = $"192.0.2.{maxHosts+1}/{networkPrefix}";

            var subnetResult = new CalculationResult
            {
                NetworkRange = networkAddress,
                BroadcastAddress = broadcastAddress,
                FirstHost = firstHost,
                LastHost = lastHost,
                SubnetMask = subnetMask
            };
            resultsList.Add(subnetResult);
        }
    }



    public class SubnetData
    {
        public string SubnetMask { get; set; }
        public string BinaryAddress { get; set; }
        public int PrefixLength { get; set; }
        public int MaxHosts { get; set; }
    }

    public SubnetData[] subnetData = new SubnetData[]
    {
        new SubnetData { SubnetMask = "255.0.0.0", BinaryAddress = "11111111.00000000.00000000.00000000", PrefixLength = 8, MaxHosts = (int)Math.Pow(2, 32 - 8) - 2 },
        new SubnetData { SubnetMask = "255.255.0.0", BinaryAddress = "11111111.11111111.00000000.00000000", PrefixLength = 16, MaxHosts = (int)Math.Pow(2, 32 - 16) - 2 },
        new SubnetData { SubnetMask = "255.255.255.0", BinaryAddress = "11111111.11111111.11111111.00000000", PrefixLength = 24, MaxHosts = (int)Math.Pow(2, 32 - 24) - 2 },
        new SubnetData { SubnetMask = "255.255.255.128", BinaryAddress = "11111111.11111111.11111111.10000000", PrefixLength = 25, MaxHosts = (int)Math.Pow(2, 32 - 25) - 2 },
        new SubnetData { SubnetMask = "255.255.255.192", BinaryAddress = "11111111.11111111.11111111.11000000", PrefixLength = 26, MaxHosts = (int)Math.Pow(2, 32 - 26) - 2 },
        new SubnetData { SubnetMask = "255.255.255.224", BinaryAddress = "11111111.11111111.11111111.11100000", PrefixLength = 27, MaxHosts = (int)Math.Pow(2, 32 - 27) - 2 },
        new SubnetData { SubnetMask = "255.255.255.240", BinaryAddress = "11111111.11111111.11111111.11110000", PrefixLength = 28, MaxHosts = (int)Math.Pow(2, 32 - 28) - 2 },
        new SubnetData { SubnetMask = "255.255.255.248", BinaryAddress = "11111111.11111111.11111111.11111000", PrefixLength = 29, MaxHosts = (int)Math.Pow(2, 32 - 29) - 2 },
        new SubnetData { SubnetMask = "255.255.255.252", BinaryAddress = "11111111.11111111.11111111.11111100", PrefixLength = 30, MaxHosts = (int)Math.Pow(2, 32 - 30) - 2 }
            };
}
<style>
    .input-group {
        margin-bottom: 15px;
    }

        .input-group label {
            display: block;
            margin-bottom: 5px;
        }

        .input-group input {
            width: 200px;
            padding: 5px;
            border: 1px solid #ccc;
            border-radius: 3px;
        }

    .calculate-btn {
        padding: 10px 20px;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 3px;
        cursor: pointer;
    }

    .results {
        margin-top: 20px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 3px;
        background-color: #f9f9f9;
    }

        .results p {
            margin: 5px 0;
        }

            .results p strong {
                font-weight: bold;
            }
</style>